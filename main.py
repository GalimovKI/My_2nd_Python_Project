from aiogram import Bot, Dispatcher, executor, types
import emoji
import InlineKeyboards as kb
import Media as md
import Database as db


uk = Bot('6510430107:AAGbKF7AJ4CJqrl1XJrc7w9k1TSpthlA2nU')
dp = Dispatcher(uk)
PAYMENT_TOKEN = '1744374395:TEST:d95f8dc81fd66d363b47'

in_payload = "in_payload"


async def on_startup(_):
    await db.conn_start()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    file = open('./logo.jpg', 'rb')
    await message.answer_photo(file)
    await message.answer(f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} '
                          f'{message.from_user.last_name} {emoji.emojize(":brain:")}! </b> '
                                     f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –º—ã –Ω–∞—á–Ω–µ–º, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è '
                          f'—Å –º–æ–∏–º <b>–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b> {emoji.emojize(":fire:")} '
                                     f'<b>–£–∂–µ –∑–Ω–∞–∫–æ–º—ã —Å –Ω–∏–º?</b> '
                          f'—Ç–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ üòÅ </b> '
                                    , parse_mode='html', reply_markup=kb.start_markup)


@dp.callback_query_handler()
async def callback_message(callback):
    if callback.data == 'portfolio':
        await uk.send_media_group(callback.from_user.id, media=md.media)
        await uk.send_message(callback.from_user.id,
                              f'–≠—Ç–æ –º–∞–ª–∞—è —á–∞—Å—Ç—å –º–æ–∏—Ö —Ä–∞–±–æ—Ç, —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ? '
                              f'{emoji.emojize(":eyes:")}',
                              reply_markup=kb.markup_prtfl)
    if callback.data == 'order':
        finger = open('./finger.jpeg', 'rb')
        await uk.send_photo(callback.from_user.id, finger,
                            f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å',
                            reply_markup=kb.markup_order)
    if callback.data == 'logo':
        await uk.send_invoice(callback.from_user.id,
                              title='–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞',
                              description=f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ '
                                          f'–æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {emoji.emojize(":brain:")} '
                                          f'(–û–ø–ª–∞—Ç—É –≤–µ–¥–∏—Ç–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –ü–ö –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏üôÉ)',
                              provider_token=PAYMENT_TOKEN,
                              currency='rub',
                              need_email=True,
                              need_phone_number=True,
                              prices=[types.LabeledPrice('–ü–æ–∫—É–ø–∫–∞ –¥–∏–∑–∞–π–Ω–∞', amount=1000 * 100)],
                              start_parameter='logo-buying-example',
                              payload='logo')

    if callback.data == 'preview':
        await uk.send_invoice(callback.from_user.id,
                            title='–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞',
                            description=f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ '
                                        f'–æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {emoji.emojize(":brain:")} '
                                        f'(–û–ø–ª–∞—Ç—É –≤–µ–¥–∏—Ç–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –ü–ö –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏üôÉ)',
                            provider_token=PAYMENT_TOKEN,
                            currency='rub',
                            need_email=True,
                            need_phone_number=True,
                            prices=[types.LabeledPrice('–ü–æ–∫—É–ø–∫–∞ –¥–∏–∑–∞–π–Ω–∞', amount=500 * 100)],
                            start_parameter='preview-buying-example',
                            payload='preview')

    if callback.data == 'banners':
        await uk.send_invoice(callback.from_user.id,
                            title='–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞',
                            description=f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ '
                                        f'–æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {emoji.emojize(":brain:")} '
                                        f'(–û–ø–ª–∞—Ç—É –≤–µ–¥–∏—Ç–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –ü–ö –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏üôÉ)',
                            provider_token=PAYMENT_TOKEN,
                            currency='rub',
                            need_email=True,
                            need_phone_number=True,
                            prices=[types.LabeledPrice('–ü–æ–∫—É–ø–∫–∞ –¥–∏–∑–∞–π–Ω–∞', amount=800 * 100)],
                            start_parameter='banners-buying-example',
                            payload='banners'
                        )
    await uk.answer_callback_query(callback.id)


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await uk.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    print('successful_payment:')
    payment = message.successful_payment.to_python()
    for key, val in payment.items():
        if key == 'invoice_payload':
            in_payload = val
        if key == 'order_info':
            phone_number = val["phone_number"]
            email = val["email"]
            await db.add_user(phone_number, email, in_payload)
        print(f'{key} = {val}')
    kot = open('./kot.jpg', 'rb')
    await uk.send_photo(message.chat.id, kot, f'–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ {emoji.emojize(":unicorn:")}. '
        f'–û–∂–∏–¥–∞–π—Ç–µ, –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¢–ó –∏ '
        f'–æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞{emoji.emojize(":sleeping_face:")}.'
        f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –º–µ–Ω—è'.format(
            total_amount=message.successful_payment.total_amount // 100,
            currency=message.successful_payment.currency
        )
     )


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
